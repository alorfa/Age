out float FragColor;

in vec2 uv;

const int KERNEL_SIZE = 64;
uniform sampler2D normal_map, pos_map, noise_map;
uniform vec3 kernel[KERNEL_SIZE];
uniform mat4 projection;
const float radius = 0.5;
const float bias = 0.025;

void main()
{	
	vec2 noiseScale = vec2(textureSize(pos_map, 0)) / vec2(textureSize(noise_map, 0));
    vec3 normal = texture(normal_map, uv).rgb;
    vec3 fragPos = texture(pos_map, uv).rgb;
    vec3 randomVec = vec3(texture(noise_map, uv * noiseScale).rg, 0.);

    vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
	vec3 bitangent = cross(normal, tangent);
	mat3 TBN = mat3(tangent, bitangent, normal);

	float occlusion = 0.;
	for (int i = 0; i < KERNEL_SIZE; i++)
	{
		vec3 samplePos = TBN * kernel[i];
		samplePos = fragPos + samplePos * radius;

		vec4 offset = projection * vec4(samplePos, 1.);
		offset.xyz /= offset.w;
		offset.xyz = offset.xyz * 0.5 + 0.5;

		float sampleDepth = texture(pos_map, offset.xy).z;
		float rangeCheck = smoothstep(0., 1., radius / abs(fragPos.z - sampleDepth));
		occlusion += (samplePos.z + bias < sampleDepth ? 1.0 : 0.0) * rangeCheck; 
	}
	occlusion = 1.0 - (occlusion / KERNEL_SIZE);
    FragColor = occlusion;
}
