in vec2 fragUv;
in vec3 fragPos;
in mat3 fragTBN;

uniform sampler2D brdfLut;
uniform samplerCube specularMap;
uniform samplerCube diffuseMap;
uniform float maxSpecMipLevel = 1.;

uniform vec3 cameraPos;

uniform float near = 0.1f;
uniform float far = 100.f;

vec3 computeNormal(in vec3 normal)
{
    vec3 realNormal = normal * 2.f - 1.f;
    return normalize(fragTBN * realNormal);
}

#if defined(AGE_MAX_POINT_LIGHTS) && AGE_MAX_POINT_LIGHTS > 0
uniform PointLight pointLightSources[AGE_MAX_POINT_LIGHTS];
#endif
#if defined(AGE_MAX_SPOT_LIGHTS) && AGE_MAX_SPOT_LIGHTS > 0
uniform SpotLight spotLightSources[AGE_MAX_SPOT_LIGHTS];
#endif
#if defined(AGE_MAX_DIR_LIGHTS) && AGE_MAX_DIR_LIGHTS > 0
uniform DirLight dirLightSources[AGE_MAX_DIR_LIGHTS];
#endif
#if defined(AGE_MAX_SHADOW_DIR_LIGHTS) && AGE_MAX_SHADOW_DIR_LIGHTS > 0
uniform DirLightShadow shadowDirLightSources[AGE_MAX_SHADOW_DIR_LIGHTS];
in vec3 shadowPositions[AGE_MAX_SHADOW_DIR_LIGHTS];
#endif

void paintOver()
{
    initViewContext(fragPos, cameraPos);
    vec3 light = vec3(0.f);
#if defined(AGE_MAX_SHADOW_DIR_LIGHTS) && AGE_MAX_SHADOW_DIR_LIGHTS > 0 
    for (int i = 0; i < AGE_MAX_SHADOW_DIR_LIGHTS; i++)
    {
        light += LIGHTING_MODEL(shadowDirLightSources[i], shadowPositions[i]);
    } 
#endif 
#if defined(AGE_MAX_DIR_LIGHTS) && AGE_MAX_DIR_LIGHTS > 0 
    for (int i = 0; i < AGE_MAX_DIR_LIGHTS; i++)
    {
        light += LIGHTING_MODEL(dirLightSources[i]);
    } 
#endif 
#if defined(AGE_MAX_POINT_LIGHTS) && AGE_MAX_POINT_LIGHTS > 0
    for (int i = 0; i < AGE_MAX_POINT_LIGHTS; i++)
    {
        light += LIGHTING_MODEL(pointLightSources[i], fragPos);
    } 
#endif
#if defined(AGE_MAX_SPOT_LIGHTS) && AGE_MAX_SPOT_LIGHTS > 0
    for (int i = 0; i < AGE_MAX_SPOT_LIGHTS; i++) 
    {
        light += LIGHTING_MODEL(toPointLight(spotLightSources[i], fragPos), fragPos);
    }
#endif
    light += LIGHTING_MODEL(diffuseMap, specularMap, brdfLut, maxSpecMipLevel);
    light += LIGHTING_MODEL(material.emission);
#if !defined(AGE_DEPTH_ONLY)
    age_FragColor = vec4(light, material.alpha);
#endif
}
