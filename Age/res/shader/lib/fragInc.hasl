in vec2 fragUv;
in vec3 fragPos;
in mat3 fragTBN;

uniform samplerCube skybox;

uniform float near = 0.1f;
uniform float far = 100.f;

vec3 computeNormal(in vec3 normal)
{
    vec3 realNormal = normal * 2.f - 1.f;
    return normalize(fragTBN * realNormal);
}

#if defined(AGE_MAX_POINT_LIGHTS) && AGE_MAX_POINT_LIGHTS > 0
uniform PointLight pointLightSources[AGE_MAX_POINT_LIGHTS];
#endif
#if defined(AGE_MAX_DIR_LIGHTS) && AGE_MAX_DIR_LIGHTS > 0
uniform DirLight dirLightSources[AGE_MAX_DIR_LIGHTS];
#endif
#if defined(AGE_MAX_SPOT_LIGHTS) && AGE_MAX_SPOT_LIGHTS >0
uniform SpotLight spotLightSources[AGE_MAX_SPOT_LIGHTS];
#endif

void phong_paintOver()
{
    vec3 light = vec3(0.f);
    LIGHT_SETUP(fragPos);
#if defined(AGE_MAX_DIR_LIGHTS) && AGE_MAX_DIR_LIGHTS > 0 
    for (int i = 0; i < AGE_MAX_DIR_LIGHTS; i++)
    { 
        DIR_LIGHT_SETUP(dirLightSources[i]);
        light += blinnPhong_computeRay();
    } 
#endif 
#if defined(AGE_MAX_POINT_LIGHTS) && AGE_MAX_POINT_LIGHTS > 0
    for (int i = 0; i < AGE_MAX_POINT_LIGHTS; i++)
    {
        POINT_LIGHT_SETUP(pointLightSources[i], fragPos); 
        light += blinnPhong_computeRay() * attenuation;
    } 
#endif
#if defined(AGE_MAX_SPOT_LIGHTS) && AGE_MAX_SPOT_LIGHTS > 0
    for (int i = 0; i < AGE_MAX_SPOT_LIGHTS; i++) 
    {
        SPOT_LIGHT_SETUP(spotLightSources[i], fragPos);
        light += blinnPhong_computeRay() * attenuation;
    }
#endif

    age_FragColor = vec4(light, 1.f);
}
void pbr_paintOver()
{
    vec3 viewDir = normalize(fragPos - cameraPos);
    vec3 reflectDir = reflect(viewDir, age_normal);
    vec3 reflectedColor = sampleCubemap(skybox, reflectDir).rgb;

    age_FragColor = vec4(reflectedColor, 1.f);
}