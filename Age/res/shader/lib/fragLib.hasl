const float PI = 3.1415926535;
const float TAU = PI * 2.;
const float HALF_PI = PI * 0.5;

const float INV_PI = 1. / PI;
const float INV_TAU = 1. / TAU;
const float INV_HALF_PI = 1. / HALF_PI;

const vec3 LUMA = vec3(0.2126, 0.7152, 0.0722);

struct DirLight
{
    vec3 dir, ambient, color;
    float sourceRadius;
};
struct PointLight
{
    vec3 pos, ambient, color;
    float sourceRadius, attOffset, maxDist;
};
struct SpotLight
{
    vec3 pos, dir, ambient, color;
    float cutOff, outerCutOff;
    float sourceRadius, attOffset, maxDist;
};

struct ViewContext
{
    vec3 V, R;
    float NV;
};
struct LightContext
{
    float NL, NH, HV, falloff; 
};

struct Material
{
    vec3 base_color, diffuse, specular, normal, emission;
    float metallic, roughness, alpha;
};
Material material;
ViewContext vc;

float pow2(float v) {
    return v * v;
}
float pow4(float v) {
    float v2 = v * v;
    return v2 * v2;
}

PointLight toPointLight(SpotLight light, vec3 fragmentPos)
{
    PointLight result;
    result.pos = light.pos;
    //result.ambient = light.ambient;
    result.sourceRadius = light.sourceRadius;
    result.attOffset = light.attOffset;
    result.maxDist = light.maxDist;
    float theta = dot(normalize(light.pos - fragmentPos), normalize(-light.dir)); 
    float epsilon = light.cutOff - light.outerCutOff; 
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0., 1.); 
    result.color = light.color * intensity;
    result.ambient = light.ambient * intensity;
    return result;
}

vec2 sampleSphericalMap(vec3 vec)
{
    const vec2 invAtan = vec2(0.1591, 0.3183);
    vec2 uv = vec2(atan(vec.z, vec.x), asin(vec.y));
    return uv * invAtan + 0.5;
}

float getDepth(float n, float f)
{
    return (gl_FragCoord.z - n) / (f - n);
}

float D_GGX(float NH2, float a2)
{
    float denom = NH2 * (a2 - 1.) + 1.;
    return a2 / (denom * denom * PI);
}

LightContext computeLightData_Sphere(vec3 Lwl, vec3 V, vec3 R, vec3 N, float sourceRadius, float lightRadius, float distOffset)
{
    LightContext result;
    vec3 centerToRay = dot(Lwl, R) * R - Lwl;
    float distLtoNewL = sourceRadius / length(centerToRay);
    vec3 newLwl = Lwl + centerToRay * min(distLtoNewL, 1.);
    float distSqr = dot(newLwl, newLwl);
    float dist = sqrt(distSqr);
    vec3 newL = newLwl / dist;
    vec3 H = normalize(V + newL);
    result.HV = max(dot(H, V), 0.);
    result.NH = distLtoNewL > 1. ? 1. : max(dot(N, H), 0.);
    result.NL = max(dot(N, newL), 0.);
    result.falloff = pow2(clamp(1. - pow4(dist / lightRadius), 0., 1.)) / (distSqr + distOffset);
    return result;
}
LightContext computeLightData_Point(vec3 Lwl, vec3 L, vec3 V, vec3 N)
{
    LightContext result;
    vec3 H = normalize(V + L);
    result.HV = max(dot(H, V), 0.);
    result.NH = max(dot(N, H), 0.);
    result.NL = max(dot(N, L), 0.);
    return result;
}

/*float D_experiment(vec3 V, vec3 R, vec3 Lwl, vec3 N, float sourceRadius)
{
    float maxValue = max(D_GGX(1.) * INV_PI, 1.);

    vec3 newLwl = computeNewL_Sphere(Lwl, R, sourceRadius);
    vec3 newL = normalize(newLwl);
    vec3 H = normalize(V + newL);
    vec3 reflected = reflect(-newL, N);
    float NH = max(dot(H, N), 0.);
    float result = D_GGX(NH) / maxValue;
    return result;
    return distance(newLwl, Lwl) < sourceRadius ? min(D_GGX(1.), PI) : result;
}*/
float G_Smith(float dotNL, float dotNV, float roughness)
{
    float r1 = roughness + 1.;
    float k = r1 * r1 * 0.125;
    float GL = dotNL / (dotNL * (1.0 - k) + k);
    float GV = dotNV / (dotNV * (1.0 - k) + k);
    return GL * GV;
}
float G_SchlickSmithGGX_Indirect(float dotNL, float dotNV, float roughness)
{
    float k = roughness * roughness * 0.5;
    float GL = dotNL / (dotNL * (1.0 - k) + k);
    float GV = dotNV / (dotNV * (1.0 - k) + k);
    return GL * GV;
}
vec3 F_Schlick(float HV, vec3 materialSpec)
{
    //return materialSpec; //for tests
    return materialSpec + (1. - materialSpec) * pow(max(1. - HV, 0.), 5.);
}
vec3 F_Schlick_Indirect(vec3 F0, float NV, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - NV, 0.0, 1.0), 5.0);
}

float radicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), radicalInverse_VdC(i));
}

vec3 importanceSample_GGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness*roughness;
    
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
    
    // from spherical coordinates to cartesian coordinates - halfway vector
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
    
    // from tangent-space H vector to world-space sample vector
    vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
    
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

vec3 linearToScreenPrecise(vec3 linearRGB)
{
    vec3 a = 12.92 * linearRGB;
    vec3 b = 1.055 * pow(linearRGB, vec3(1.0 / 2.4)) - 0.055;
    vec3 c = step(vec3(0.0031308), linearRGB);
    return mix(a, b, c);
}
vec3 screenToLinearPrecise(vec3 screenRGB)
{
    vec3 a = screenRGB / 12.92;
    vec3 b = pow((screenRGB + 0.055) / 1.055, vec3(2.4));
    vec3 c = step(vec3(0.04045), screenRGB);
    return mix(a, b, c);
}

vec3 linearToScreen(vec3 linearRGB)
{
    return pow(linearRGB, vec3(1. / 2.2));
}
vec3 screenToLinear(vec3 screenRGB)
{
    return pow(screenRGB, vec3(2.2));
}

vec3 pbr_computeLight(DirLight light)
{    
    vec3 R = reflect(-vc.V, material.normal);
    LightContext c = computeLightData_Sphere(light.dir, vc.V, R, material.normal, light.sourceRadius, 1., 1.);
    vec3 materialSpec = mix(vec3(0.04), material.base_color, material.metallic);
    vec3 F = F_Schlick(c.HV, materialSpec);
    vec3 diffColor = (vec3(1.) - F) * (1. - material.metallic);
    vec3 finalSpecular = vec3(0.);
    vec3 finalDiffuse = vec3(0.);
    vec3 finalAmbient = vec3(0.);
#ifndef AGE_DISABLE_SPECULAR
    float clampedRoughness = max(material.roughness, 0.03);
    float DMaxValue = max(D_GGX(1., pow4(clampedRoughness)) * INV_PI, 1.);
    float D = D_GGX(pow2(c.NH), pow4(clampedRoughness)) / DMaxValue;
    float G = G_Smith(vc.NV, c.NL, material.roughness);

    vec3 numerator = D * G * F;
    float denominator = 4. * vc.NV * c.NL + 0.0001;
    finalSpecular = numerator / denominator;
#endif
#ifndef AGE_DISABLE_DIFFUSE
    finalDiffuse = diffColor * material.base_color * INV_PI;
#endif
#ifndef AGE_DISABLE_AMBIENT
    finalAmbient = light.ambient * material.base_color;
#endif
    return (finalDiffuse + finalSpecular) * light.color * c.NL + finalAmbient;
}

vec3 pbr_computeLight(PointLight light, vec3 fragmentPos)
{    
    vec3 Lwl = light.pos - fragmentPos;
    LightContext c = computeLightData_Sphere(Lwl, vc.V, vc.R, material.normal, light.sourceRadius, light.maxDist, light.attOffset);
    vec3 materialSpec = mix(vec3(0.04), material.base_color, material.metallic);
    vec3 F = F_Schlick(c.HV, materialSpec);
    vec3 diffColor = (vec3(1.) - F) * (1. - material.metallic);
    vec3 finalSpecular = vec3(0.);
    vec3 finalDiffuse = vec3(0.);
    vec3 finalAmbient = vec3(0.);
#ifndef AGE_DISABLE_SPECULAR
    float clampedRoughness = max(material.roughness, 0.03);
    float r4 = pow4(clampedRoughness);
    float DMaxValue = max(D_GGX(1., r4) * INV_PI, 1.);
    float D = D_GGX(pow2(c.NH), r4) / DMaxValue;
    float G = G_Smith(vc.NV, c.NL, material.roughness);

    vec3 numerator = D * G * F;
    float denominator = 4. * vc.NV * c.NL + 0.0001;
    finalSpecular = numerator / denominator;
#endif
#ifndef AGE_DISABLE_DIFFUSE
    finalDiffuse = diffColor * material.base_color * INV_PI;
#endif
#ifndef AGE_DISABLE_AMBIENT
    finalAmbient = light.ambient * material.base_color;
#endif
    return ((finalDiffuse + finalSpecular) * light.color * c.NL + finalAmbient) * c.falloff;
}

vec3 pbr_computeLight(samplerCube difMap, samplerCube specMap, sampler2D brdfLut, float maxLod)
{
    vec3 F0 = mix(vec3(0.04), material.base_color, material.metallic);
    vec3 F = F_Schlick_Indirect(F0, vc.NV, material.roughness);
    vec3 diffColor = (vec3(1.) - F) * (1. - material.metallic);

    vec3 difIndirect = texture(difMap, material.normal).rgb;
    vec3 specIndirect = textureLod(specMap, vc.R, material.roughness * maxLod).rgb;
    vec2 brdfValue = texture(brdfLut, vec2(vc.NV, material.roughness)).xy;

    vec3 specResult, difResult;
#ifndef AGE_DISABLE_SPECULAR
    specResult = specIndirect * (F * brdfValue.x + brdfValue.y);
#endif
#ifndef AGE_DISABLE_DIFFUSE
    difResult = difIndirect * diffColor * material.base_color;
#endif
    return difResult + specResult;
}

void initViewContext(vec3 fragmentPos, vec3 cameraPos)
{
    vc.V = normalize(cameraPos - fragmentPos);
    vc.R = reflect(-vc.V, material.normal);
    vc.NV = max(0., dot(vc.V, material.normal));
}

vec3 learnopenglTonemap(vec3 x)
{
    return vec3(1.) - exp(-x);
}
vec3 reinhardTonemap(vec3 x)
{
    return x / (x + vec3(1.));
}
vec3 uncharted2_tonemap_partial(vec3 x)
{
    float A = 0.15f;
    float B = 0.50f;
    float C = 0.10f;
    float D = 0.20f;
    float E = 0.02f;
    float F = 0.30f;
    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}
vec3 uncharted2Tonemap(vec3 v)
{
    float exposure_bias = 2.0f;
    vec3 curr = uncharted2_tonemap_partial(v * exposure_bias);

    vec3 W = vec3(11.2f);
    vec3 white_scale = vec3(1.0f) / uncharted2_tonemap_partial(W);
    return curr * white_scale;
}
vec3 acesTonemap(vec3 v)
{
    v *= 0.6f;
    float a = 2.51f;
    float b = 0.03f;
    float c = 2.43f;
    float d = 0.59f;
    float e = 0.14f;
    return (v*(a*v+b))/(v*(c*v+d)+e);
}

#define LIGHTING_MODEL pbr_computeLight
#line 1
