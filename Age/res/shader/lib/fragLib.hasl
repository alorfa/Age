const float PI = 3.1415926535;
const float INV_PI = 1. / PI;

struct DirLight
{
    vec3 dir, ambient, color;
};
struct PointLight
{
    vec3 pos, ambient, color;
    float constant, linear, quadratic;
};
struct SpotLight
{
    vec3 pos, dir, ambient, color;
    float cutOff, outerCutOff;
    float constant, linear, quadratic;
};

uniform vec3 cameraPos;

vec3 age_emission, age_base_color, age_specular, age_normal;
float age_metalness, age_roughness, age_shininess;

DirLight age_ray;
vec3 age_viewDir;

vec4 sampleCubemap(samplerCube cubemap, in vec3 texCoord)
{
    vec3 coord = vec3(texCoord.x, -texCoord.z, texCoord.y);
    return texture(cubemap, coord);
}

float getDepth(float n, float f)
{
    return (gl_FragCoord.z - n) / (f - n);
}

float normalDistribution_GGX(float specFactor)
{
    float a2 = age_roughness * age_roughness;
    a2 *= a2;
    float spec2 = specFactor * specFactor;
    float denom = spec2 * ((a2 * 0.99 + 0.01) - 1.) + 1.;
    return a2 / (denom * denom * PI);
}
float geometrySchlickGGX(float cosTheta)
{
    float r1 = age_roughness + 1.;
    float k = (r1 * r1) * 0.125;

    float denominator = cosTheta * (1. - k) + k;
    return cosTheta / denominator;
}
float geometry_Smith(float viewCos, float diffFactor)
{
    float ggx1 = geometrySchlickGGX(viewCos);
    float ggx2 = geometrySchlickGGX(diffFactor);
    
    return ggx1 * ggx2;
}
vec3 fresnelSchlick(float specFactor, vec3 materialSpec)
{
    return materialSpec + (1. - materialSpec) * pow(clamp(1. - specFactor, 0., 1.), 5.);
}

vec3 blinnPhong_computeRay()
{
    vec3 halfwayDir = normalize(age_viewDir + age_ray.dir);
    float diffFactor = max(dot(age_ray.dir, age_normal), 0.);
    float specFactor = pow(max(dot(age_normal, halfwayDir), 0.), age_shininess);
    vec3 ambientCol = age_base_color * age_ray.ambient;
    vec3 diffuse = age_base_color * diffFactor;
    vec3 specular = age_specular * specFactor;
    return (diffuse + specular) * age_ray.color + ambientCol;
}
vec3 pbr_computeRay()
{
    float age_viewCos = max(dot(age_normal, age_viewDir), 0.);

    vec3 halfwayDir = normalize(age_viewDir + age_ray.dir);
    float diffFactor = max(dot(age_ray.dir, age_normal), 0.);
    float specFactor = max(dot(age_normal, halfwayDir), 0.);
    float halfViewCos = max(dot(age_viewDir, halfwayDir), 0.);

    vec3 materialSpec = mix(vec3(0.04), age_base_color, age_metalness);
    vec3 specColor = fresnelSchlick(halfViewCos, materialSpec);
    //vec3 diffColor = (vec3(1.) - specColor) * (1. - age_metalness);
    vec3 diffColor = (vec3(1.) - specColor);
    float normalDistrib = normalDistribution_GGX(specFactor);
    float geometryLet = geometry_Smith(age_viewCos, diffFactor);

    vec3 numerator = normalDistrib * geometryLet * specColor;
    float denominator = 4. * age_viewCos * diffFactor + 0.0001;
    vec3 specular = numerator / denominator;
    vec3 directLight = (diffColor * age_base_color * INV_PI + specular) * age_ray.color * diffFactor;

    return age_ray.ambient * age_base_color + directLight;
}

#define LIGHT_SETUP(fragmentPos) age_viewDir = normalize(cameraPos - fragmentPos)

#define DIR_LIGHT_SETUP(just_light) \
age_ray.dir = just_light.dir; \
age_ray.color = just_light.color; \
age_ray.ambient = just_light.ambient 

#define POINT_LIGHT_SETUP(just_light, fragmentPos) \
float dist = distance(just_light.pos, fragmentPos); \
float attenuation = 1. / (just_light.constant + just_light.linear * dist + just_light.quadratic * (dist * dist)); \
age_ray.dir = normalize(just_light.pos - fragmentPos); \
age_ray.color = just_light.color; \
age_ray.ambient = just_light.ambient

#define SPOT_LIGHT_SETUP(just_light, fragmentPos) \
POINT_LIGHT_SETUP(just_light, fragmentPos); \
float theta = dot(age_ray.dir, normalize(-just_light.dir)); \
float epsilon = just_light.cutOff - just_light.outerCutOff; \
float intensity = clamp((theta - just_light.outerCutOff) / epsilon, 0., 1.); \
age_ray.color *= intensity
