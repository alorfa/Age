const float PI = 3.1415926535;
const float INV_PI = 1. / PI;

struct DirLight
{
    vec3 dir, ambient, color;
    float sourceRadius;
};
struct PointLight
{
    vec3 pos, ambient, color;
    float sourceRadius, attOffset, maxDist;
};
struct SpotLight
{
    vec3 pos, dir, ambient, color;
    float cutOff, outerCutOff;
    float sourceRadius, attOffset, maxDist;
};

struct LightContext
{
    float NL, NH, HV, falloff; 
};

uniform vec3 cameraPos;

vec3 age_emission, age_base_color, age_specular, age_normal;
float age_metalness, age_roughness, age_shininess, age_alpha = 1.;

vec3 age_V, age_R;

float pow2(float v) {
    return v * v;
}
float pow4(float v) {
    float v2 = v * v;
    return v2 * v2;
}

PointLight toPointLight(SpotLight light, vec3 fragmentPos)
{
    PointLight result;
    result.pos = light.pos;
    result.ambient = light.ambient;
    result.sourceRadius = light.sourceRadius;
    result.attOffset = light.attOffset;
    result.maxDist = light.maxDist;
    float theta = dot(normalize(light.pos - fragmentPos), normalize(-light.dir)); 
    float epsilon = light.cutOff - light.outerCutOff; 
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0., 1.); 
    result.color = light.color * intensity;
    return result;
}

vec4 sampleCubemap(samplerCube cubemap, in vec3 texCoord)
{
    //vec3 coord = vec3(texCoord.x, -texCoord.z, texCoord.y);
    //return texture(cubemap, coord);
    return texture(cubemap, texCoord);
}
const vec2 invAtan = vec2(0.1591, 0.3183);
vec2 sampleSphericalMap(vec3 vec)
{
    vec2 uv = vec2(atan(vec.z, vec.x), asin(vec.y));
    return uv * invAtan + 0.5;
}

float getDepth(float n, float f)
{
    return (gl_FragCoord.z - n) / (f - n);
}

float D_GGX(float NH2, float a2)
{
    float denom = NH2 * (a2 - 1.) + 1.;
    return a2 / (denom * denom * PI);
}

LightContext computeLightData_Sphere(vec3 Lwl, vec3 V, vec3 R, vec3 N, float sourceRadius, float lightRadius, float distOffset)
{
    LightContext result;
    vec3 centerToRay = dot(Lwl, R) * R - Lwl;
    float distLtoNewL = sourceRadius / length(centerToRay);
    vec3 newLwl = Lwl + centerToRay * min(distLtoNewL, 1.);
    float distSqr = dot(newLwl, newLwl);
    float dist = sqrt(distSqr);
    vec3 newL = newLwl / dist;
    vec3 H = normalize(V + newL);
    result.HV = max(dot(H, V), 0.);
    result.NH = distLtoNewL > 1. ? 1. : max(dot(N, H), 0.);
    result.NL = max(dot(N, newL), 0.);
    result.falloff = pow2(clamp(1. - pow4(dist / lightRadius), 0., 1.)) / (distSqr + distOffset);
    return result;
}
LightContext computeLightData_Point(vec3 Lwl, vec3 L, vec3 V, vec3 N)
{
    LightContext result;
    vec3 H = normalize(V + L);
    result.HV = max(dot(H, V), 0.);
    result.NH = max(dot(N, H), 0.);
    result.NL = max(dot(N, L), 0.);
    return result;
}

/*float D_default(float NH, float scatter)
{
    float raw = D_GGX(clamp(NH + scatter, 0., 1.));
    float maxValue = max(D_GGX(1.) * INV_PI, 1.);
    return raw / maxValue;
}*/
/*float D_experiment(vec3 V, vec3 R, vec3 Lwl, vec3 N, float sourceRadius)
{
    float maxValue = max(D_GGX(1.) * INV_PI, 1.);

    vec3 newLwl = computeNewL_Sphere(Lwl, R, sourceRadius);
    vec3 newL = normalize(newLwl);
    vec3 H = normalize(V + newL);
    vec3 reflected = reflect(-newL, N);
    float NH = max(dot(H, N), 0.);
    float result = D_GGX(NH) / maxValue;
    return result;
    return distance(newLwl, Lwl) < sourceRadius ? min(D_GGX(1.), PI) : result;
}*/
float geometrySchlickGGX(float cosTheta)
{
    float r1 = age_roughness + 1.;
    float k = (r1 * r1) * 0.125;

    float denominator = cosTheta * (1. - k) + k;
    return cosTheta / denominator;
}
float G_Smith(float NV, float NL)
{
    float ggx1 = geometrySchlickGGX(NV);
    float ggx2 = geometrySchlickGGX(NL);
    
    return ggx1 * ggx2;
}
vec3 F_Schlick(float HV, vec3 materialSpec)
{
    //return materialSpec; //for tests
    return materialSpec + (1. - materialSpec) * pow(max(1. - HV, 0.), 5.);
}

/*vec3 blinnPhong_computeRay()
{
    vec3 diffuse = vec3(0.);
    vec3 specular = vec3(0.);
    vec3 ambientCol = vec3(0.);

    vec3 halfv = normalize(age_V + age_ray.dir);
    float NL = max(dot(age_ray.dir, age_normal), 0.);
    float NH = pow(max(dot(age_normal, halfv), 0.), age_shininess);
#ifndef AGE_DISABLE_AMBIENT
    ambientCol = age_base_color * age_ray.ambient;
#endif
#ifndef AGE_DISABLE_DIFFUSE
    diffuse = age_base_color * NL;
#endif 
#ifndef AGE_DISABLE_SPECULAR
    specular = age_specular * NH;
#endif

    return (diffuse + specular) * age_ray.color + ambientCol;
}*/
vec3 pbr_computeRay(DirLight light)
{
    float NV = max(dot(age_normal, age_V), 0.);
    
    vec3 R = reflect(-age_V, age_normal);
    //LightContext c = computeLightData_Point(normalize(Lwl), age_V, age_normal);
    LightContext c = computeLightData_Sphere(light.dir, age_V, R, age_normal, light.sourceRadius, 1., 1.);
    //computeLightData_Sphere(L, age_V, age_R, age_normal, light.radius, HV, NH, NL, distSqr);
    vec3 materialSpec = mix(vec3(0.04), age_base_color, age_metalness);
    vec3 F = F_Schlick(c.HV, materialSpec);
    vec3 diffColor = (vec3(1.) - F) * (1. - age_metalness);
    vec3 finalSpecular = vec3(0.);
    vec3 finalDiffuse = vec3(0.);
#ifndef AGE_DISABLE_SPECULAR
    float clampedRoughness = max(age_roughness, 0.03);
    float DMaxValue = max(D_GGX(1., pow4(clampedRoughness)) * INV_PI, 1.);
    float D = D_GGX(pow2(c.NH), pow4(clampedRoughness)) / DMaxValue;
    float G = G_Smith(NV, c.NL);

    vec3 numerator = D * G * F;
    float denominator = 4. * NV * c.NL + 0.0001;
    finalSpecular = numerator / denominator;
#endif
#ifndef AGE_DISABLE_DIFFUSE
    finalDiffuse = diffColor * age_base_color * INV_PI;
#endif
    vec3 directLight = (finalDiffuse + finalSpecular) * light.color * c.NL;

#ifdef AGE_DISABLE_AMBIENT
    return directLight;
#else
    return light.ambient * age_base_color + directLight;
#endif
}

vec3 pbr_computeRay(PointLight light, vec3 fragmentPos)
{
    float NV = max(dot(age_normal, age_V), 0.);
    
    vec3 Lwl = light.pos - fragmentPos;
    vec3 R = reflect(-age_V, age_normal);
    //LightContext c = computeLightData_Point(normalize(Lwl), age_V, age_normal);
    LightContext c = computeLightData_Sphere(Lwl, age_V, R, age_normal, light.sourceRadius, light.maxDist, light.attOffset);
    //computeLightData_Sphere(L, age_V, age_R, age_normal, light.radius, HV, NH, NL, distSqr);
    vec3 materialSpec = mix(vec3(0.04), age_base_color, age_metalness);
    vec3 F = F_Schlick(c.HV, materialSpec);
    vec3 diffColor = (vec3(1.) - F) * (1. - age_metalness);
    vec3 finalSpecular = vec3(0.);
    vec3 finalDiffuse = vec3(0.);
#ifndef AGE_DISABLE_SPECULAR
    float clampedRoughness = max(age_roughness, 0.03);
    float r4 = pow4(clampedRoughness);
    float DMaxValue = max(D_GGX(1., r4) * INV_PI, 1.);
    float D = D_GGX(pow2(c.NH), r4) / DMaxValue;
    float G = G_Smith(NV, c.NL);

    vec3 numerator = D * G * F;
    float denominator = 4. * NV * c.NL + 0.0001;
    finalSpecular = numerator / denominator;
#endif
#ifndef AGE_DISABLE_DIFFUSE
    finalDiffuse = diffColor * age_base_color * INV_PI;
#endif
    vec3 directLight = (finalDiffuse + finalSpecular) * light.color * c.NL;

#ifdef AGE_DISABLE_AMBIENT
    return directLight * c.falloff;
#else
    return (light.ambient * age_base_color + directLight) * c.falloff;
#endif
}

float RadicalInverse_VdC(uint bits) 
{
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
     return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness*roughness;
    
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
    
    // from spherical coordinates to cartesian coordinates - halfway vector
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
    
    // from tangent-space H vector to world-space sample vector
    vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
    
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

#define LIGHT_SETUP(fragmentPos) age_V = normalize(cameraPos - fragmentPos); \
age_R = reflect(-age_V, age_normal)
