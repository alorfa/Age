const float PI = 3.1415926535;
const float INV_PI = 1. / PI;

struct DirLight
{
    vec3 dir, ambient, color;
    float radius;
};
struct PointLight
{
    vec3 pos, ambient, color;
    float constant, linear, quadratic;
    float radius;
};
struct SpotLight
{
    vec3 pos, dir, ambient, color;
    float cutOff, outerCutOff;
    float constant, linear, quadratic;
    float radius;
};
struct AgeRay
{
    vec3 dir, ambient, color, toLight;
    float radius;
};

uniform vec3 cameraPos;

vec3 age_emission, age_base_color, age_specular, age_normal;
float age_metalness, age_roughness, age_shininess, age_alpha = 1.;

AgeRay age_ray;
vec3 age_viewDir;

vec4 sampleCubemap(samplerCube cubemap, in vec3 texCoord)
{
    vec3 coord = vec3(texCoord.x, -texCoord.z, texCoord.y);
    return texture(cubemap, coord);
}

float getDepth(float n, float f)
{
    return (gl_FragCoord.z - n) / (f - n);
}

float D_GGX(float NH)
{
    float localRoughness = max(age_roughness, 0.03);
    float a2 = pow(localRoughness, 4.);
    //float a2 = localRoughness * localRoughness;
    //float a2 = a * a;
    float spec2 = NH * NH;
    float denom = spec2 * (a2 - 1.) + 1.;
    float result = a2 / (denom * denom * PI);
    return result;
}

vec3 lightToRay(vec3 L, vec3 R)
{   
    return max(dot(L, R), 0.) * R - L;
}
vec3 distancePointToRay(vec3 L, vec3 R, float sourceRadius)
{
    vec3 centerToRay = lightToRay(L, R);
    vec3 closestPoint = L + centerToRay * clamp(sourceRadius / length(centerToRay), 0., 1.);
    return closestPoint;
}

float D_default(float NH, float scatter)
{
    float raw = D_GGX(clamp(NH + scatter, 0., 1.));
    float maxValue = max(D_GGX(1.) * INV_PI, 1.);
    return raw / maxValue;
}
float D_experiment(vec3 V, vec3 R, vec3 L, vec3 N, float sourceRadiusSqr)
{
    float maxValue = max(D_GGX(1.) * INV_PI, 1.);

    vec3 fromLightToRay = max(dot(L, R), 0.) * R - L;
    vec3 newL = L + fromLightToRay;
    vec3 halfv = normalize(V + normalize(L));
    vec3 reflected = reflect(-normalize(newL), N);
    float NH = max(dot(halfv, N), 0.);
    float result = D_GGX(NH) / maxValue;
    //return result;
    return dot(fromLightToRay, fromLightToRay) < sourceRadiusSqr ? min(D_GGX(1.), PI) : result;
}
float geometrySchlickGGX(float cosTheta)
{
    float r1 = age_roughness + 1.;
    float k = (r1 * r1) * 0.125;

    float denominator = cosTheta * (1. - k) + k;
    return cosTheta / denominator;
}
float G_Smith(float NV, float NL)
{
    float ggx1 = geometrySchlickGGX(NV);
    float ggx2 = geometrySchlickGGX(NL);
    
    return ggx1 * ggx2;
}
vec3 F_Schlick(float HV, vec3 materialSpec)
{
    //return materialSpec; //for tests
    return materialSpec + (1. - materialSpec) * pow(max(1. - HV, 0.), 5.);
}

vec3 blinnPhong_computeRay()
{
    vec3 diffuse = vec3(0.);
    vec3 specular = vec3(0.);
    vec3 ambientCol = vec3(0.);

    vec3 halfv = normalize(age_viewDir + age_ray.dir);
    float NL = max(dot(age_ray.dir, age_normal), 0.);
    float NH = pow(max(dot(age_normal, halfv), 0.), age_shininess);
#ifndef AGE_DISABLE_AMBIENT
    ambientCol = age_base_color * age_ray.ambient;
#endif
#ifndef AGE_DISABLE_DIFFUSE
    diffuse = age_base_color * NL;
#endif 
#ifndef AGE_DISABLE_SPECULAR
    specular = age_specular * NH;
#endif

    return (diffuse + specular) * age_ray.color + ambientCol;
}
vec3 pbr_computeRay()
{
    float NV = max(dot(age_normal, age_viewDir), 0.);

    vec3 halfv = normalize(age_viewDir + age_ray.dir);
    vec3 reflected = reflect(-age_ray.dir, age_normal);
    vec3 viewRefl = reflect(-age_viewDir, age_normal);
    float NL = max(dot(age_ray.dir, age_normal), 0.);
    float NH = max(dot(age_normal, halfv), 0.);
    float HV = max(dot(age_viewDir, halfv), 0.);
    float RV = max(dot(reflected, age_viewDir), 0.);
    vec3 materialSpec = mix(vec3(0.04), age_base_color, age_metalness);
    vec3 F = F_Schlick(HV, materialSpec);
    vec3 diffColor = (vec3(1.) - F) * (1. - age_metalness);
    vec3 finalSpecular = vec3(0.);
    vec3 finalDiffuse = vec3(0.);
#ifndef AGE_DISABLE_SPECULAR
    //float NDF = D_default(NH, age_ray.scatter);
    float NDF = D_experiment(age_viewDir, viewRefl, age_ray.toLight, age_normal, age_ray.radius);
    float G = G_Smith(NV, NL);

    vec3 numerator = NDF * G * F;
    float denominator = 4. * NV * NL + 0.0001;
    finalSpecular = numerator / denominator;
#endif
#ifndef AGE_DISABLE_DIFFUSE
    finalDiffuse = diffColor * age_base_color * INV_PI;
#endif
    vec3 directLight = (finalDiffuse + finalSpecular) * age_ray.color * NL;

#ifdef AGE_DISABLE_AMBIENT
    return directLight;
#else
    return age_ray.ambient * age_base_color + directLight;
#endif
}

#define LIGHT_SETUP(fragmentPos) age_viewDir = normalize(cameraPos - fragmentPos)

#define DIR_LIGHT_SETUP(just_light, fragmentPos) \
float cameraDist = distance(cameraPos, fragmentPos); \
age_ray.toLight = age_ray.dir = just_light.dir; \
age_ray.color = just_light.color; \
age_ray.ambient = just_light.ambient; \
age_ray.radius = just_light.radius

#define POINT_LIGHT_SETUP(just_light, fragmentPos) \
float dist = distance(just_light.pos, fragmentPos); \
float cameraDist = distance(cameraPos, fragmentPos); \
float attenuation = 1. / (just_light.constant + just_light.linear * dist + just_light.quadratic * (dist * dist)); \
age_ray.toLight = just_light.pos - fragmentPos; \
age_ray.dir = normalize(age_ray.toLight); \
age_ray.color = just_light.color; \
age_ray.ambient = just_light.ambient; \
age_ray.radius = just_light.radius

#define SPOT_LIGHT_SETUP(just_light, fragmentPos) \
POINT_LIGHT_SETUP(just_light, fragmentPos); \
float theta = dot(age_ray.dir, normalize(-just_light.dir)); \
float epsilon = just_light.cutOff - just_light.outerCutOff; \
float intensity = clamp((theta - just_light.outerCutOff) / epsilon, 0., 1.); \
age_ray.color *= intensity
